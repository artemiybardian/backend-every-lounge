import telebot
from telebot.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo)
import requests
import logging
from datetime import datetime, timedelta
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7702184372:AAFpYNtn0V1MJRYB7BwgYVkd1pBhdWvSXCU'
DJANGO_API_URL = 'https://lounge-booking.com/api/users/auth/'
WEBAPP_URL = 'https://lounge-booking.com/'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–Ω–æ–ø–æ–∫
buttons_store = {}

bot = telebot.TeleBot(API_TOKEN)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–Ω–æ–ø–æ–∫


def cleanup_old_buttons():
    while True:
        now = datetime.now()
        to_delete = []

        for key, value in buttons_store.items():
            if now - value['timestamp'] > timedelta(days=1):
                try:
                    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    bot.edit_message_reply_markup(
                        chat_id=value['chat_id'], message_id=value['message_id'], reply_markup=None)
                    to_delete.append(key)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        for key in to_delete:
            del buttons_store[key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        threading.Event().wait(600)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
threading.Thread(target=cleanup_old_buttons, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start


@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç %s", message.from_user.username)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    location_button = KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüòä", request_location=True)
    keyboard.add(location_button)

    bot.send_message(
        message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(content_types=['location'])
def handle_location(message):
    if message.location is not None:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                    message.from_user.username)

        latitude = message.location.latitude
        longitude = message.location.longitude
        telegram_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name if message.from_user.first_name else None
        last_name = message.from_user.last_name if message.from_user.last_name else None

        data = {
            "telegram_id": telegram_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "location": {
                "latitude": latitude,
                "longitude": longitude
            },
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ Django API
        response = requests.post(DJANGO_API_URL, json=data)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ Django: %s", data)

        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ Django API
            response_data = response.json()
            if 'token' in response_data:
                access_token = response_data['token']

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ WebApp —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞
                keyboard = InlineKeyboardMarkup()
                button = InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüòä",
                    web_app=WebAppInfo(f"{WEBAPP_URL}?token={access_token}")
                )
                keyboard.add(button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                sent_message = bot.send_message(
                    message.chat.id,
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                    reply_markup=keyboard
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
                buttons_store[sent_message.message_id] = {
                    'chat_id': sent_message.chat.id,
                    'message_id': sent_message.message_id,
                    'timestamp': datetime.now()
                }
            else:
                bot.send_message(
                    message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.infinity_polling()
