from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from app.keyboards import booking, location
from config import DJANGO_API_URL, WEBAPP_URL
import logging
import requests

logging.basicConfig(level=logging.INFO)
log = logging.getLogger('Handlers')


router = Router()


@router.message(CommandStart())
async def start(message: Message):
    welcome_text = (
        "‚úàÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Every Lounge WebApp!**\n\n"
        "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –ª—É—á—à–∏–µ –∑–∞–ª—ã –æ–∂–∏–¥–∞–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É."
        "–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∑–∞–ª.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ **'–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'**, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
    )
    
    await message.answer(text=welcome_text, reply_markup=booking, parse_mode='Markdown')
    log.info(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start')


@router.callback_query(F.data == 'start_booking')
async def start_booking(callback: CallbackQuery):
    first_text = "üìç **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º—ã –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ª—ã –æ–∂–∏–¥–∞–Ω–∏—è!**"
    second_text = "–ù–∞–∂–º–∏—Ç–µ **'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'**, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!"
    await callback.answer('–í—ã –Ω–∞—á–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!')
    await callback.message.edit_text(text=first_text, parse_mode='Markdown')
    await callback.message.answer(text=second_text, reply_markup=location, parse_mode='Markdown')


@router.message(F.location)
async def handle_location(message: Message):
    latitude = message.location.latitude
    longitude = message.location.longitude
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name if message.from_user.first_name else None
    last_name = message.from_user.last_name if message.from_user.last_name else None
    
    data = {
        "telegram_id": telegram_id,
        "username": username,
        "first_name": first_name,
        "last_name": last_name,
        "location": {
            "latitude": latitude,
            "longitude": longitude
        },
    }
    
    response = requests.post(DJANGO_API_URL, json=data)
    log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ Django: %s", data)

    if response.status_code == 200:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ Django API
        response_data = response.json()
        if 'token' in response_data:
            access_token = response_data['token']

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ WebApp —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞
            lounge_book = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ªüòä", 
                                      web_app=WebAppInfo(
                                          url=f"{WEBAPP_URL}?token={access_token}"))]
            ])

            await message.answer("–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞–ª—ã –æ–∂–∏–¥–∞–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=lounge_book)

        else:
            message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
    else:
        message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
